const VfsStats = require('java.class/ru.myx.ae3.vfs.VfsStatusProvider');

const DefaultVfsCounters = {
	group : 'd',
	name : 'dv',
	title : 'VFS Counters',
	columns : {
		s : {
			name : "s",
			nameExport : "writeOps",
			title : "VFS Write Operations, Σ",
			titleShort : "VFS Σ(wr)",
			type : "number",
			variant : "integer",
			log : "detail",
			chart : "counter",
		},
		ds : {
			name : "ds",
			title : "VFS Write Operations, Δ",
			titleShort : "VFS Δ(wr)",
			type : "number",
			variant : "integer",
			log : "normal",
			chart : "delta",
			evaluate : {
				type : 'delta',
				reference : 's'
			}
		},
		r : {
			name : "r",
			nameExport : "readOps",
			title : "VFS Read Operations, Σ",
			titleShort : "VFS Σ(rd)",
			type : "number",
			variant : "integer",
			log : "detail",
			chart : "counter",
		},
		dr : {
			name : "dr",
			title : "VFS Read Operations, Δ",
			titleShort : "VFS Δ(rd)",
			type : "number",
			variant : "integer",
			log : "normal",
			chart : "delta",
			evaluate : {
				type : 'delta',
				reference : 'r'
			}
		},
		s0 : {
			name : "s0",
			nameExport : "writeOpsSetBinary",
			title : "VFS WriteSetBinary, Σ",
			titleShort : "VFS Σ(WrSb)",
			type : "number",
			variant : "integer",
		},
		s1 : {
			name : "s1",
			nameExport : "writeOpsSetText",
			title : "VFS WriteSetText, Σ",
			titleShort : "VFS Σ(WrSt)",
			type : "number",
			variant : "integer",
		},
		s2 : {
			name : "s2",
			nameExport : "writeOpsSetContainer",
			title : "VFS WriteSetContainer, Σ",
			titleShort : "VFS Σ(WrSc)",
			type : "number",
			variant : "integer",
		},
		s3 : {
			name : "s3",
			nameExport : "writeOpsSetModified",
			title : "VFS WriteSetModified, Σ",
			titleShort : "VFS Σ(WrSm)",
			type : "number",
			variant : "integer",
		},
		s4 : {
			name : "s4",
			nameExport : "writeOpsSetPrimitive",
			title : "VFS WriteSetPrimitive, Σ",
			titleShort : "VFS Σ(WrSp)",
			type : "number",
			variant : "integer",
		},
		s6 : {
			name : "s6",
			nameExport : "writeOpsSetHardLink",
			title : "VFS WriteSetHardlink, Σ",
			titleShort : "VFS Σ(WrLn)",
			type : "number",
			variant : "integer",
		},
		s5 : {
			name : "s5",
			nameExport : "writeOpsDoUnlink",
			title : "VFS WriteDoUnlink, Σ",
			titleShort : "VFS Σ(WrUn)",
			type : "number",
			variant : "integer",
		},
		r0 : {
			name : "r0",
			nameExport : "readOpsBinaryContent",
			title : "VFS ReadBinaryContent, Σ",
			titleShort : "VFS Σ(RdBc)",
			type : "number",
			variant : "integer",
		},
		r1 : {
			name : "r1",
			nameExport : "readOpsContentCollection",
			title : "VFS ReadContentCollection, Σ",
			titleShort : "VFS Σ(RdCc)",
			type : "number",
			variant : "integer",
		},
		r2 : {
			name : "r2",
			nameExport : "readOpsContentElement",
			title : "VFS ReadContentElement, Σ",
			titleShort : "VFS Σ(RdCe)",
			type : "number",
			variant : "integer",
		},
		r3 : {
			name : "r3",
			nameExport : "readOpsContentPrimitive",
			title : "VFS ReadContentPrimitive, Σ",
			titleShort : "VFS Σ(RdCp)",
			type : "number",
			variant : "integer",
		},
		r4 : {
			name : "r4",
			nameExport : "readOpsContentValue",
			title : "VFS ReadContentValue, Σ",
			titleShort : "VFS Σ(RdCv)",
			type : "number",
			variant : "integer",
		},
		r5 : {
			name : "r5",
			nameExport : "readOpsTextContent",
			title : "VFS ReadTextContent, Σ",
			titleShort : "VFS Σ(RdTc)",
			type : "number",
			variant : "integer",
		},
		r6 : {
			name : "r6",
			nameExport : "readOpsContainerIsEmpty",
			title : "VFS ReadIsContainerEmpty, Σ",
			titleShort : "VFS Σ(RdIe)",
			type : "number",
			variant : "integer",
		},
	},
	getValues : function getValues(/*previous*/){
		return {
			s : VfsStats.statsTotalWriteOperations,
			r : VfsStats.statsTotalReadOperations,
			s0 : VfsStats.statsWriteSetBinary,
			s1 : VfsStats.statsWriteSetText,
			s2 : VfsStats.statsWriteSetContainer,
			s3 : VfsStats.statsWriteSetModified,
			s4 : VfsStats.statsWriteSetPrimitive,
			s6 : VfsStats.statsWriteSetHardlink,
			s5 : VfsStats.statsWriteDoUnlink,
			r0 : VfsStats.statsReadBinaryContent,
			r1 : VfsStats.statsReadContentCollection,
			r2 : VfsStats.statsReadContentElement,
			r3 : VfsStats.statsReadContentPrimitive,
			r4 : VfsStats.statsReadContentValue,
			r5 : VfsStats.statsReadTextContent,
			r6 : VfsStats.statsReadIsContainerEmpty,
		};
	},
};


module.exports = DefaultVfsCounters;