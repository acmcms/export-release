<?xml version="1.0" encoding="UTF-8"?>
<type>
	<title>Abstract: ru.genre</title>
	<visibility>hidden</visibility>
	<icon>document</icon>

	<command>
		<key>getReadableNumber</key>
		<static>true</static>
		<arguments class="fieldset">
			<field id="value" class="double"/>
		</arguments>
		<script class="script" type="ACM.ECMA"><![CDATA[
			return value == undefined ? 0 :
				(value >= 100 ? Int( value ) :
					( value >= 10 ? formatFraction( value, 1 )
						: formatFraction( value, 2 ) ));
		]]></script>
	</command>
	
	<command>
		<key>ListOfMapsToJSON</key>
		<static>true</static>
		<arguments class="fieldset">
			<field id="objs" class="list"/>
		</arguments>
		<script class="script" type="ACM.ECMA"><![CDATA[
			%>[<%
			var i = 1;
			for( var item in objs ){
				%>{<%
				var j = 1;
				if( Object.isMap(item) ){
					var keys = item.keySet();
					for( var key in keys ){
						%><%= key %>:"<%= item.get( key ) %>"<%
						if( j++ != keys.size() ){
							%>,<%
						}
					}
				}else{
					var data = item.getData();
					var keys = data.keySet();
					%>key:"<%= item.$key %>",<%
					for( var key in keys ){
						%><%= key %>:"<%= data.get( key ) %>"<%
						if( j++ != keys.size() ){
							%>,<%
						}
					}
				}
				%>}<%
				if( i++ != objs.size() ){
					%>,<%
				}
			}
			%>]<%
		]]></script>
	</command>

	<command>
		<key>final</key>
		<static>true</static>
		<arguments class="fieldset">
			<field id="type" class="string" default="text/html"/>
			<field id="message" class="string"/>
		</arguments>
		<script class="script" type="ACM.TPL"><![CDATA[<%
			%><%FINAL: type %><%
				%><%= message %><%
			%><%/FINAL%><%
		%>]]></script>
	</command>

	<command>
		<key>getDefaultFields</key>
		<static>true</static>
		<arguments class="fieldset">
			<field id="obj" class="object"/>
		</arguments>
		<script class="script" type="ACM.ECMA"><![CDATA[
			return [{
				title: $dictionary.translate("title"),
				name: "titleName",
				type: "text",
				value: obj ? obj.$title : null,
				required: true,
				hint: "Название отображаеться везде"
			},{
				title: $dictionary.translate("key"),
				name: "key",
				type: "text",
				value: obj ? obj.$key : null,
				required: false,
				hint: "Системные имена обспечивают доступ пользователей к объектам, пример можно увидеть в адресной строке '/portfolio/design' это системные имена разделенные с помощью '/'. Системные имена не должны повторяться, например в 'portfolio' неможет быть два 'design'. Поисковые роботы не могут узнать что вы сменили имя, они просто удалят индексы из своей базы и может потребоваться время на их восстановление."
			}];
		]]></script>
	</command>

	<command>
		<key>titleToKey</key>
		<static>true</static>
		<arguments class="fieldset">
			<field id="title" class="string"/>
		</arguments>
		<script class="script" type="ACM.ECMA"><![CDATA[
			return FileAPI.clearSlashes( FileAPI.niceNameNotation( transliterate( title ) ) );
		]]></script>
	</command>

	<command>
		<key>drawGoogleAnalytics</key>
		<static>true</static>
		<arguments class="fieldset">
			<field id="uacct" class="string"/>
		</arguments>
		<script class="script" type="ACM.ECMA"><![CDATA[
			%><script src="http://www.google-analytics.com/urchin.js" type="text/javascript"><%
			%></script><%
			%><script type="text/javascript"><%
				%>_uacct = "<%= uacct %>";<%
				%>urchinTracker();<%
			%></script><%
		]]></script>
	</command>

	<command>
		<key>wordFilter</key>
		<static>true</static>
		<arguments class="fieldset">
			<field id="str" class="string"/>
		</arguments>
		<script class="script" type="ACM.ECMA"><![CDATA[
			return str;
		]]></script>
	</command>

	<command>
		<key>geoToIndexList</key>
		<static>true</static>
		<arguments class="fieldset">
			<field id="latitude" class="string"/>
			<field id="longitude" class="string"/>
		</arguments>
		<script class="script" type="ACM.ECMA"><![CDATA[
			var index = []; 
			return index;
		]]></script>
	</command>

	<command>
		<key>ratingToStars</key>
		<static>true</static>
		<arguments class="fieldset">
			<field id="rating" class="string"/>
			<field id="method" class="string"/>
		</arguments>
		<script class="script" type="ACM.ECMA"><![CDATA[
			var stars = 0; 
			switch( method ){
				case "task":{
					stars = rating;
				}
			}
			return stars;
		]]></script>
	</command>

	<command>
		<key>prepare</key>
		<static>true</static>
		<execute>cache</execute>
		<expire>15m</expire>
		<arguments class="fieldset">
			<field id="str" class="string"/>
			<field id="limit" class="integer"/>
		</arguments>
		<script class="script" type="ACM.ECMA"><![CDATA[
			var str = Format.uniqueWords( str ," ");
			var list = str.split(" ");
			var prepared = [];
			var i = 1;
			for( var item in list ){
				if( item.length() == 1 ){
					continue;
				}
				prepared.add( item );
				if( limit && i >= limit ){
					break;
				}
				i++;
			}
			return prepared;
		]]></script>
	</command>

	<command>
		<key>isEmail</key>
		<static>true</static>
		<execute>cache</execute>
		<expire>1m</expire>
		<arguments class="fieldset">
			<field id="email" class="string"/>
		</arguments>
		<script class="script" type="ACM.ECMA"><![CDATA[
			return email.trim().matches("^[^_.]{0}([a-zA-Z0-9\-\.\_]*[.]{0}?[a-zA-Z0-9\-\.\_]+[^_]{0}){1}@{1}[a-zA-Z0-9\-\]+[.]{1}(([a-z]{2,4})|([a-z]{2,4}[.]{1}[a-z]{2,4}))$");
//			return email.trim().matches("^[^_.]{0}([a-zA-Z0-9_]*[.]{0}?[a-zA-Z0-9_]+[^_]{0}){1}@{1}[a-z0-9]+[.]{1}(([a-z]{2,4})|([a-z]{2,4}[.]{1}[a-z]{2,4}))$");
		]]></script>
	</command>

	<command>
		<key>isLogin</key>
		<static>true</static>
		<execute>cache</execute>
		<expire>1m</expire>
		<arguments class="fieldset">
			<field id="login" class="string"/>
		</arguments>
		<script class="script" type="ACM.ECMA"><![CDATA[
			return login.trim().matches("^[a-zA-Z]{1}[a-zA-Z0-9\-\.\_]{3,24}$");
		]]></script>
	</command>

	<command>
		<key>isUrl</key>
		<static>true</static>
		<execute>cache</execute>
		<expire>1m</expire>
		<arguments class="fieldset">
			<field id="url" class="string"/>
		</arguments>
		<script class="script" type="ACM.ECMA"><![CDATA[
			return url.trim().matches("^[a-zA-Z0-9\-\.://]+\.[a-zA-Z]{2,3}(/\S*)?$");
//			return url.trim().matches("([A-Za-z][A-Za-z0-9+.-]{1,120}:[A-Za-z0-9/](([A-Za-z0-9$_.+!*,;/?:@&~=-])|%[A-Fa-f0-9]{2}){1,333}(#([a-zA-Z0-9][a-zA-Z0-9$_.+!*,;/?:@&~=%-]{0,1000}))?)");
		]]></script>
	</command>

	<command>
		<key>getUsersRoot</key>
		<export>true</export>
		<script class="script" type="ACM.ECMA"><![CDATA[
//			var root = this.getSiteRoot();
			var root = this.getGenreRoot();
			if( root ){
				return root.getChildByName("users");
			}
			return null;
		]]></script>
	</command>

	<command>
		<key>getTagsRoot</key>
		<export>true</export>
		<script class="script" type="ACM.ECMA"><![CDATA[
			var root = this.getGenreRoot();
			if( root ){
				return root.getChildByName("tags");
			}
			return null;
		]]></script>
	</command>

	<command>
		<key>getItemsRoot</key>
		<export>true</export>
		<script class="script" type="ACM.ECMA"><![CDATA[
			var root = this.getGenreRoot();
			if( root ){
				return root.getChildByName("items");
			}
			return null;
		]]></script>
	</command>

	<command>
		<key>getGenreRoot</key>
		<export>true</export>
		<script class="script" type="ACM.ECMA"><![CDATA[
			return Storage.getRoot().getChildByName("ru.genre");
		]]></script>
	</command>

	<command>
		<key>getDomainFromUrl</key>
		<static>true</static>
		<arguments class="fieldset">
			<field id="url" class="string"/>
		</arguments>
		<script class="script" type="ACM.ECMA"><![CDATA[
			url = url.replace("http://", "").replace("www.", "")+"/";
			return url.substring( 0, url.indexOf("/") ).toLowerCase();
		]]></script>
	</command>
														
	<command>
		<type>hidden</type>
		<key>getSecImage</key>
		<static>true</static>
		<script class="script" type="ACM.ECMA"><![CDATA[
			var secNumber = UserManager.generatePassword( 4, false, false);
			var chars = secNumber;
			chars.toCharArray();
			
			var profile = User.getUser().getProfile();
			profile.secNumber = secNumber;			
			User.getUser().setProfile( profile );
			User.getUser().commit();
			var image = Imaging.createImage(70,50);
			var graphics = image.getGraphics();
			import java.awt.Color;
			graphics.setColor(Color.black);
			for( var i = 0; i < 4; i++ ){
				var random = ( Random.integer( 10 ) + 5 ) * 0.01;
				var random = Random.integer( 2 ) ? random * -1 : random;
				graphics.rotate( random );
				Imaging.graphicsDrawText( 	graphics,
										chars.charAt( i ),
										( random > 0 ? Random.integer( 1 ) + 3 : 3 ) + i * 14 + 10,
										random < 0 ? Random.integer( 1 ) + 7 : 5,
										"Arial",
										true,
										false,
										30,
										0,
										5 );
			}
			return Imaging.encodePngBinary( image );
		]]></script>
	</command>
	
	<command>
		<key>sort</key>
		<export>true</export>
		<!-- execute>cache</execute>
		<expire>1h</expire -->
		<arguments class="fieldset">
			<field id="sortMap" class="map"/>
			<field id="sortType" class="string"/>
			<field id="limit" class="integer"/>
			<field id="sortDesc" class="boolean" default="false"/>
		</arguments>
		<script class="script" type="ACM.ECMA"><![CDATA[
			var currentDate = Date.now();
			var i = 1;
			var tempMap = {};
			var itemGuid = this.getGuid();
			for( var item in sortMap.entrySet() ){
				var obj = item.value;
				if( obj ){
					switch( sortType ){
						case "tagObjUsers":{
							tempMap[ item.key ] = Create.map( obj.users[ itemGuid ] ).values().size();
							break;
						}
						case "users":{
							tempMap[ item.key ] = obj.users.size();
							break;
						}
						case "created":{
							tempMap[ item.key ] = obj.$created;
							break;
						}
						case "sortObj":{
							tempMap[ item.key ] = obj.sortObj[ this.$type ][ this.getGuid() ];
							break;
						}
						case "rating":{
							if( obj.sortUsers.size() < 2 ) continue;
							var rating = 0;
							var max = 5;
							for( var userRating in obj.sortUsers.values() ){
								if( userRating > 0 ){
									if( userRating <= max ){
										rating = rating + max - userRating + 2;
									}else{
										rating = rating + 1;
									}
								}
							}
//							if( rating < 3 ) continue;
							tempMap[ item.key ] = rating;
						}
					}
				}else{
					Runtime.log("ERROR","$base - sort()", "obj( type=" + sortType + ", key=" + item.key + ", value= " + item.value + " ) doesn't exist in '" + this.getTitle() + "'" );
					continue;
				}
				if( limit && i++ >= limit ) break;
			}
			var sorted = [];
			for( var item in Sort.array( tempMap.entrySet(), sortDesc ? Sort.MAP_VALUE_DESC : Sort.MAP_VALUE ) ){
				sorted.add( Storage.getByGuid( item.key ) );
			}
			var speedTime = Date.now() - currentDate;
			if( speedTime > 300 ){
				var speedSort = Create.map( Application.speedSort );

				var data = {};
				data.count = Int( Create.map( speedSort[ sortType ] ).count, 0 ) + 1;
				data.sum = Int( Create.map( speedSort[ sortType ] ).sum, 0 ) + speedTime;
				data.lastResult = formatDate( Date.now(), "HH:mm:ss / dd.MM.yy" );
				/*
				$output(date.lastResult){
					= {
						$layout : "Date",
						format	: "HH:mm:ss / dd.MM.yy"
					};
				}
				*/
				data.lastSpeed = speedTime;
				data.avgSpeed = Int( Create.map( speedSort[ sortType ] ).avgSpeed, 0 ) ? data.sum / data.count : speedTime;
				data.maxSpeed = Int( Create.map( speedSort[ sortType ] ).maxSpeed, 0 ) < speedTime ? speedTime : Int( Create.map( speedSort[ sortType ] ).maxSpeed, 0 );
				data.minSpeed = Int( Create.map( speedSort[ sortType ] ).minSpeed, 0 ) > speedTime || Int( Create.map( speedSort[ sortType ] ).minSpeed, 0 ) == 0 ? speedTime : Int( Create.map( speedSort[ sortType ] ).minSpeed, 0 );

				speedSort[ sortType ] = data;
				Application.speedSort = speedSort;
			}
			return sorted;
		]]></script>
	</command>
	
	<command>
		<key>getIntervalNumeric</key>
		<static>true</static>
		<execute>cache</execute>
		<expire>15m</expire>
		<arguments class="fieldset">
			<field id="start" class="integer"/>
			<field id="end" class="integer"/>
		</arguments>
		<script class="script" type="ACM.ECMA"><![CDATA[
			var list = [];
			if( start < end ){
				for( var i = start; i <= end; i++ ){
					list.add( i > 9 ? i : "0" + i );
				}
			}else{
				for( var i = start; i >= end; i-- ){
					list.add( i );
				}
			}
			return list;
		]]></script>
	</command>
	
	<command>
		<key>getLastChange</key>
		<export>true</export>
		<script class="script" type="ACM.ECMA"><![CDATA[
			var login = User.getUser().getLogin();
			if( login ){
				var lastChangeMap = Create.map( Application.lastChangeMap );
				if( Date.now() - Integer( lastChangeMap[ login ], 0 ) > 2000 ){
					lastChangeMap[ login ] = Date.now();
					Application.lastChangeMap = lastChangeMap;
					return true;
				}
			}
			return false
		]]></script>
	</command>

	<command>
		<key>getGenderMap</key>
		<static>true</static>
		<execute>once</execute>
		<script class="script" type="ACM.CALC"><![CDATA[
			{
				alien: intl(en = "Alien", ru = "НЛО"),
				male: intl(en = "Male", ru = "Мужской"),
				female: intl(en = "Female", ru = "Женский")
			}
		]]></script>
	</command>

	<command>
		<key>getAge</key>
		<static>true</static>
		<arguments class="fieldset">
			<field id="date" class="object"/>
		</arguments>
		<script class="script" type="ACM.ECMA"><![CDATA[
			return Calendar.getYear( Date.now() - (date.time || date) ) - 1970;
		]]></script>
	</command>
	
	<command>
		<key>compareStrings</key>
		<static>true</static>
		<arguments class="fieldset">
			<field id="string1" class="string"/>
			<field id="string2" class="string"/>
		</arguments>
		<script class="script" type="ACM.ECMA"><![CDATA[
			var str_len1 = string1.length(); 
			var str_len2 = string2.length();
			var str1;
			var str2;
			var slen1;
			var slen2;
			var max_lenght;
			var str1Array;
			var str2Array;
			var l;
			var g;
			var now_i1 = 0;
			
			if ( str_len1 < str_len2 ){
				str1 = string1;
				str2 = string2; 
				slen1 = str_len1;
				slen2 = str_len2;
				max_lenght = slen2;
			}else{
				str2 = string1;
				str1 = string2; 
				slen1 = str_len2;
				slen2 = str_len1;
				max_lenght = slen2;
			}
			
			str1Array = str1 = str1.toLowerCase();
			str2Array = str2 = str2.toLowerCase();
			str1Array.toCharArray();
			str2Array.toCharArray();
			
			for( var i = 0; i < slen1; i++ ) {
				var l = false;
				for ( var i1 = now_i1; i1 < slen2; i1++) {
					for( var i2 = 0; i2 <= 1; i2++ ) {
						if( ( slen1 > ( i + i2 ) ) && ( slen2 > ( i1 ) ) &&  str1Array.charAt( i + i2 ) == str2Array.charAt( i1 ) ) {
							g++; 
							i = i + i2; 
							now_i1 = i1 + 1;
							l = true; 
							break;
						}
					}
					if( l ) break;
				}
			}
			return ( g * 100 / max_lenght);
		]]></script>
	</command>
	<command>
		<key>getUsersOnline</key>
		<export>true</export>
		<script class="script" type="ACM.ECMA"><![CDATA[
			var users = Create.map( Application.users );
			var login = User.getUser().getLogin()
			var userRoot = login ? this.getUserRoot( login ) : null;
			if( userRoot ){
				users[ userRoot.getGuid() ] = userRoot;
			}
			return users.values();
		]]></script>
	</command>
</type>