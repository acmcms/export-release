{
	layout	: "document",
	title	: "Layouts / Лэйауты",
	author	: "Alexander I. Kharitchev",
	email	: "myx@myx.ru",
	keywords: "layouts layout engine rendering visualization",
	content	: [
		{
			title	: "Зачем?",
			layout	: "paragraph",
			content	: [
				"Очередная попытка отделить форматирование от дизайна настолько, чтобы можно было иметь не только разный дизайн, но и разные форматы вывода. А именно: генерация PDF, генерация в изображение, GUI пользователя с использованием библиотек AWT и SWT, web-интерфейс с поддержкой как статического HTML так и DHTML/AJAX. За каждый формат ввода-вывода отвечает так называемая \"подсистема интерфейса\".",
				{
					title	: "Все-таки зачем?",
					layout	: "paragraph",
					content	: "Это должно позволить переиспользовать код. Написанный однажды код, возвращающий результат в виде лэйаута должен быть совместим с различными видами представления. Описанный однажды визуализатор лэйаута может отрисовывать данные не только для того кода, ради которого этот лэйаут реализовывался. Формат лэйаутов расширяем и гибок."
				},
				undefined
			]
		},
		{
			title	: "Что такое лэйаут?",
			layout	: "section",
			content	: [
				"Лэйаут - это иерархические данные в определенном формате. Лэйаут - это набор атрибутов и вложенных лэйаутов, который составлен по определенным правилам и предназначен для последующего отображения системой. В памяти он представлен объектом со свойствами, в персистентном виде он может быть представлен как JSON или XML. При хранении в виде JSON может иметь расширения файла jsld и mime-тип application/x-ae3-js-layout-data.",
				"Данные могут быть представлены как undefined, число, строка, массив или объект с полем 'layout'. Если значение undefined - элемент игнорируется. Если значение число - вызывается лэйаут 'number' с соответствующим значением. По аналогии, для строкового значения или массива будут вызваны лэйауты string и sequence соответственно. Получившийся у нас объект с полем layout и зовется лэйаутом. Он представляет собой набор аргументов, которые необходимо передать соответствующей функции, которая зовется обработчиком лэйаута. При вызове обработчика лэйаута так же передается текущий контекст рендеринга. Результатом выполнения обработчика может стать, как воздействие на контекст рендеринга, так и подмена лэйаута на другой лэйаут. Фактически, любой лэйаут явно или не явно отвечает за раскладку данных на устройстве отображения, потому и называется лэйаутом.",
				{
					title	: "Какие общие правила относятся к атрбутам/свойствам лэйаутов?",
					layout	: "paragraph",
					content	: [
						"Следующие:",
						{
							layout	: "numbered",
							sequence: "restart",
							elements: [
								"для контейнерных лэйаутов основной вложенный лэйаут должен находиться в свойстве с именем content в виде лэйаута",
								"для групповых лэйаутов элементы группы должны находиться в свойстве с именем elements в виде массива лэйаутов",
								"если при отсутствии поддержки данного лэйаута допускается его подмена простым строковым значением, оно должно быть указано в свойстве с именем value",
								undefined
							]
						},
						undefined
					]
				},
				undefined
			]
		},
		{
			title	: "Какие поддерживаются интерфейсы?",
			layout	: "paragraph",
			content	: [
				"На данный момент определены следующие варианты подсистемы интерфейса:",
				{
					layout	: "numbered",
					sequence: "restart",
					elements: [
						"AWT - встроенный в яву графический интерфейс AWT/SWING предназначенный для работы в качестве настольного приложения",
						"DHTML - интерфейс одновременно работающий в двух режимах: стандартный HTML для роботов и старых браузеров и динамический DHTML/AJAX для современных браузеров",
						"HTML - стфндартный HTML",
						"JSON - сериализация лэйаута в виде JSON",
						"PDF - генератор PDF документов",
						"SWT - графический интерфейс JFACE/SWT предназначенный для работы в качестве настольного приложения",
						"TEXT",
						"EMAIL",
						"WEB",
						"XML - сериализация лэйаута в виде XML",
						undefined
					]
				},
				undefined
			]
		},
		{
			title	: "Как оно работает?",
			layout	: "paragraph",
			content	: [
				"Разделим все лэйауты на две части: одна из них обязательная для поддержки в любой подсистеме интерфейса, другая часть занимается преобразованием мета-лэйаутов в такие лэйауты, которые обязательны для поддержки в подсистеме интерфейса.",
				"Изначально предоставлен набор стандартных мета-лэйаутов.",
				"Каждая подсистема интерфейса предоставляет реализации обязательных лэйаутов и нативные реализации тех стандартных мета-лэйаутов, которые можно выгодно отобразить в данном интерфейсе.",
				"Для каждого конкретного применения возможно как переопределение/дополнение стандартных лэйаутов, так и определение новых лэйаутов, для отображения любых объектов связанных с конкретным приложением.",
				"Это всё дополняется тем, что один из способ описания мета-лэйаутов (JSLT) позволяет использовать один и тотже код, как для рендеринга на сервере, так и для рендеринга на стороне клиента: в браузере.",
				{
					title	: "Как происходит рендеринг?",
					layout	: "paragraph",
					content	: [
						"Обработка происходит в контексте выполнения, он содержит информацию о текущем лэйауте, состоянии стэка и состоянии обработки.",
						"Обработка лэйаута происходит в слудующем порядке:",
						{
							layout	: "numbered",
							sequence: "restart",
							elements: [
								"Если значение undefined, завершить обработку текущего лэйаута",
								"Если значение булевое значение, число, строка или массив - заменить его на лэйаут boolean, number, string, sequence соответственно",
								"Для ближайшего лэйаута в стеке вызывается обработчик перехода, который может подменять определенные лэйауты. Например: лэйаут document может для всех непосредственно вложенных в него лэйаутов string делать подмену его на лэйаут paragraph с соотвествующим содержимым",
								"Если лэйаут подменили, завершить обработку текущего лэйаута",
								"Для скина вызывается обработчик лэйаута. Например: лэйаут page может добавлять раскладку страницы: навигацию, ссылки и т.п.",
								"Если лэйаут подменили, завершить обработку текущего лэйаута",
								"Для текущей подсистемы интерфейса (AWT, PDF, DHTML, ...) вызывается обработчик лэйаута. Например: интерфейсы SWT и AWT могут обрабатывать лэйаут tree самостоятельно, обладая системными контролами для отображения дерева.",
								"Если лэйаут подменили, завершить обработку текущего лэйаута",
								"Если в \"системном наборе лэйаутов\" определен соответствующий лэйаут, для него вызывается соответствующий обработчик",
								"Если лэйаут подменили, завершить обработку текущего лэйаута",
								"Если лэйаут имеет свойство content, подменить лэйаут на лэйайт container с тем же значением свойства content и завершить обработку лэйаута",
								"Если лэйаут имеет массив в свойстве elements, подменить на лэйаут sequence с соответствующим массивом в свойстве elements и завершить обработку лэйаута",
								"Если лэйаут имеет свойство value, подменить на лэйаут string с соответствующим значением в свойстве value и завершить обработку лэйаута",
								"Ошибка, использован неопределенный лэйаут!",
								undefined
							]
						},
						"Описанная выше последовательность действий представляет собой один шаг рендеринга. В результате выполнения шага проиходит преобразование текущего лэйаута, переход к следующем элементу массива, углубление в стек или выход из стека.",
						"Обработка завершается когда стек становится пуст. При запросе на рендеринг создается контекст, в стеке которого лежит изначально переданный для отрисовки лэйаут.",
						undefined
					]
				},
				{
					title	: "Зачем так сложно?",
					layout	: "paragraph",
					content	: [
						"Для одного имени лэйаута подразумевается то, что на разных уровнях могут существовать дополняющие друг друга описания. Например, лэйаут document может быть определен как в скине сайта, так и среди стандартных системных лэйаутов. При этом его реализация в скине сайта имеет возможность не только подменить лэйаут, но и пропустить его выполнение передав одноименному лэйауту, определенному выше. Это требуется, если определенный в скине лэйаут должен обрабатывать только определенные наборы данных, определяя их пригодность непосредственно при выполнении.",
						"Для примера, на уровне приложения можно переопределить лэйаут string и, при обнаружении в тексте ссылок и адресов почты, подменять строку соответствующими структурами.",
						undefined
					]
				},
				{
					title	: "Как может одно и тоже описание лэйаута выглядеть соответственно контексту?",
					layout	: "paragraph",
					content	: [
						"Визуализация происходит в текущем контексте. В каждый момент времени для текущего контекста определено понятие масштаба, которое может принимать одно из следующих значений:",
						{
							layout	: "numbered",
							sequence: "restart",
							elements: [
								"COMPACT - компактный во всех измерениях - минимальный возможный",
								"WIDE - полная ширина содержимого",
								"DOCUMENT - полный размер контента во всех измерениях",
								"ROW - полная ширина контейнера",
								"COLUMN - полная высота контейнера",
								"SCREEN - полный размер контейнера во всех измерениях",
								undefined
							]
						},
						"Каждый лэйаут может быть обработан в зависимости от текущего масштаба, который может меняться по мере углубления в структуру лэйаута. Таким образом один и тот-же лэйаут может выглядеть по разному в различных местах документа."
					]
				},
				undefined
			]
		},
		{
			title	: "Что такое скин?",
			layout	: "paragraph",
			content	: "Скин это набор лэйаутов, совместно реализующих один из возможных дизайнов."
		},
		{
			title	: "Что такое системный набор лэйаутов?",
			layout	: "paragraph",
			content	: "Совокупность всех доступных в данном контексте лэйаутов, включая: стандартные лэйауты поставляемые с системой, лэйауты определенные/переопределенные для конкретного сервера, лэйауты определенные/переопределенные для конкретного сайта, за исключением всех интерфейсных лейаутов."
		},
		{
			title	: "Каков набор доступных лэйаутов?",
			layout	: "paragraph",
			content	: [
				"Разделим все лэйауты на следующие уровни:",
				{
					layout	: "numbered",
					sequence: "restart",
					elements: [
						"APPLICATION - лэйауты приложения, например: лэйауты, определенные в рамках отдельного сайта, осуществляющие преобразования определенных понятий этого сайта в стандартные лэйауты",
						"GEOMETRY - геометрия - первый базовый тип лэйаутов, обязательный для поддержки в подсистеме интерфейса",
						"INTERACTION - интерактив - второй базовый тип лэйаутов, обязательный для поддержки в подсистеме интерфейса, допускается 'пустая' реализация, когда данный формат ввода-вывода не подразумевает интерактива",
						"LOGICAL - логические, стандартный, расширяемый набор лэйаутов",
						"PERSISTENT - при храненни некоторые виды лэйаутов оптимальнее хранить в специальном виде",
						undefined
					]
				},
				"Набор лэйаутов расширяем и дополняем. Возможно добавлять новые лэйауты и переопределять/дополнять существующие. Система предполагает наличие неких обязательных для поддержки лэйаутов, а в поставку так же входит некоторый набор стандартных лэйаутов. Набор доступных лэйаутов на каждом шаге рендеринга состоит одновременно из всех стандартных лэйаутов и всех переопределенных лэйаутов.",
				undefined
			]
		},
		{
			title	: "Какие лэйауты входят в стандартную поставку?",
			layout	: "paragraph",
			content	: [
				"Следующие:",
				{
					layout	: "numbered",
					sequence: "restart",
					elements: [
						"string (geo) - строка plain-текста",
						"number - число",
						"container (int) - базовые контейнерный лэйаут, необходим для сохранения пути к элементам данных",
						"sequence (geo) - базовый групповой лэйаут, определяет собой последовательность элементов",
						"document - контейнерный лэйаут, предназначен для определения свойств документа",
						"paragraph",
						"numbered (log) - нумерованный список",
						"grid (geo) - сетка, последовательность ячеек с фиксированным числом столбцов",
						"code (app) - исходный код, нумерованный список с особым фаорматированием",
						"image",
						"null (geo) - игнорируется",
						"layout-example - отображает исходный код и как будет выглядеть результат",
						undefined
					]
				},
				{
					title	: "Атрибуты лэйаута string",
					layout	: "numbered",
					sequence: "restart",
					elements: [
						"value - строка текста"
					]
				},
				{
					title	: "Атрибуты лэйаута number",
					layout	: "numbered",
					sequence: "restart",
					elements: [
						"value - число"
					]
				},
				{
					title	: "Атрибуты лэйаута container",
					layout	: "numbered",
					sequence: "restart",
					elements: [
						"content - вложенный лэйаут"
					]
				},
				{
					title	: "Атрибуты лэйаута sequence",
					layout	: "numbered",
					sequence: "restart",
					elements: [
						"elements - массив элементов последовательности"
					]
				},
				{
					title	: "Атрибуты лэйаута image",
					layout	: "numbered",
					sequence: "restart",
					elements: [
						"href - опциональный (указывается один из 'href', 'binary', 'image', 'resolve'), строка, URL для получения изображения",
						"binary - опциональный (указывается один из 'href', 'binary', 'image', 'resolve'), бинарное значение, содержащее последовательность байтов файла изображения",
						"image - опциональный (указывается один из 'href', 'binary', 'image', 'resolve'), изображение (в яве объект типа Image)",
						[
							"resolve - опциональный (указывается один из 'href', 'binary', 'image', 'resolve'), строка, виртуальный адрес изображения, точный смысл значения зависит от префикса, определены следующие префиксы:",
							{
								layout	: "numbered",
								sequence: "restart",
								elements: [
									"absolute - строка определяет полный путь в vfs, пример: absolute:public/resources/doc/layouts/sample.jpg",
									"package - строка определяет путь в vfs относительно пакета текущего лэйаута, пример: package:data/doc/sample.jpg",
									"skin - строка определяет путь в vfs относительно корня скина, пример: skin:$files/images/logo.jpg",
									undefined
								]
							},
							undefined
						]
					]
				},
				undefined
			]
		},
		{
			title	: "Как дополнять и переопределять лэйауты?",
			layout	: "section",
			content	: [
				"Для этого нужно наделать файлов типа [<interface>-]<layout[-layout...]>[-<zoom>] с расширениями .jslt или .jsob.",
				"Типы mime для файлов jslt и jsob: application/x-ae3-js-layout-transform и application/x-ae3-js-object соответственно.",
				{
					title	: "JSLT?",
					layout	: "paragraph",
					content	: [
						"JSLT - JavaScript Layout Transformation - формат описания мета-лэйаута, позволяющий использовать одно описание как на сервере, так и в браузере.",
						"Это отрывок скрипта на языке JavaScript описывающий тело функции, принимающей параметр layout, чья задача вернуть тот же лэйаут, другой лэйаут или null.",
						"Для успешного выполнения возложенных на этот скрипт задач требуется соблюдать следующие правила:",
						{
							layout	: "numbered",
							sequence: "restart",
							elements: [
								"использовать стандартные возможности языка JavaScript",
								"использовать дополнительные возможности предоставляемые системой рендеринга лэйаутов",
								"использовать способы взаимодействия с контекстом предоставляемые системой рендеринга лэйаутов",
								"использовать способы запроса данных предоставляемые системой рендеринга лэйаутов",
								"ничего другого не использовать 8-)",
								undefined
							]
						},
						"Пример кода JSLT:",
						{
							layout	: "code",
							language: "javascript",
							elements: [
								"return layout.hidden ? null : layout;",
								undefined
							]
						},
						undefined
					]
				},
				{
					title	: "JSO?",
					layout	: "paragraph",
					content	: [
						"JSO - JavaScript Object - формат описания мета-лэйаута, позволяющий использовать одно описание как на сервере, так и в браузере.",
						"Это одно выражение, возвращающее объект (который так же может быть и конструктором).",
						"В рамках задачи по реализации лэйаута нас интересует, чтобы в свойстве onLayoutExecute лежала функция вида function(context, layout) задача которой вернуть подмененный лэйаут, тотже лэйаут или null.",
						"Для успешного выполнения возложенных на этот скрипт задач требуется соблюдать следующие правила:",
						{
							layout	: "numbered",
							sequence: "restart",
							elements: [
								"использовать стандартные возможности языка JavaScript",
								"использовать дополнительные возможности предоставляемые системой рендеринга лэйаутов",
								"использовать способы взаимодействия с контекстом предоставляемые системой рендеринга лэйаутов",
								"использовать способы запроса данных предоставляемые системой рендеринга лэйаутов",
								"ничего другого не использовать 8-)",
								undefined
							]
						},
						"Пример кода JSO:",
						{
							layout	: "code",
							language: "javascript",
							elements: [
								"{",
								"\tkey : \"example\",",
								"\ttitle : \"Example\",",
								"\tproperty1 : true,",
								"\tonLayoutExecute : function(context, layout){",
								"\t\treturn layout.hidden ? null : layout;",
								"\t}",
								"}",
								undefined
							]
						},
						undefined
					]
				},
				{
					title	: "Что за дополнительные возможности предоставляемые системой рендеригна лэйаутов?",
					layout	: "paragraph",
					content	: [
						"Это набор функций, констант и конструкторов доступный через объект контекста Layout. Они расширяют встроенные возможности языка яваскрипта, а так же предоставляет стандартные функции обращения к данным и взаимодействия с контекстом рендеринга лейаутов.",
						"Их формализация необходима, так как эти дополнения поддерживаются любым интерфейсом рендеринга.",
						"Объект Layouts содержит следующие свойства:",
						{
							layout	: "numbered",
							sequence: "restart",
							elements: [
								"convertClassNameToLayoutName - метод Layouts.convertClassNameToLayoutName(name) преобразовывает имя класса (сформированное по правилам формирования имен классов) в имя лэйаута, например: SequenceAttachmentWest -> sequence-attachment-west",
								"convertLayoutNameToClassName - метод Layouts.convertLayoutNameToClassName(name) преобразовывает имя лэйаута (сформированное по правилам формирования имен лэйаутов) в имя класса, например: sequence-attachment-west -> SequenceAttachmentWest",
								"extend - метод Layouts.extend(prototype[, properties]) создает возврaщает новый объект, прототипом которого является объект указанный аргументом prototype",
								"formatObject - метод Layouts.formatObject(object[, level[, limit]]) возвращает строку с валидным JSON в удобочитаемом виде и эквивалентным переданному аргументом object объекту",
								undefined
							]
						},
						undefined
					]
				},
				undefined
			]
		},
		{
			title	: "Чего еще не сделано?",
			layout	: "paragraph",
			content	: [
				{
					layout	: "numbered",
					sequence: "restart",
					elements: [
						"address space - vfs or something?",
						"hanleQuery as well as exising handleReply to be able to serve internal and referenced resources",
						"layout в js представляет собой один expression и длинный... в ошибках не видно реального номера строки!",
						"icon layout",
						"использовать разделенные таблицы в sequence в pdf",
						[
							"chart layout - pie, bar, stacked",
							{
								layout	: "null",
								content	: {
									layout	: "chart-pie",
									title	: "Example Pie Chart",
									elements: [
										{
											title	: "Chrysler",
											value	: 5
										},
										{
											title	: "Nissan",
											value	: 4
										},
										{
											title	: "Toyota",
											value	: 3
										},
										{
											title	: "Mazda",
											value	: 2
										},
										undefined
									]
								}
							}
						],
						[
							"table layout - с заголовками и столбцами данных",
							{
								layout	: "layout-example",
								content	: {
									layout	: "table",
									columns	: 4,
									elements: [
										1,
										2,
										3,
										4,
										5,
										6,
										7
									]
								}
							}
						],
						"shadow layout",
						"zoom в яве - не особо пока надо для sp",
						"document layout - questions: padding, color...",
						"skin API?",
						"JSO layouts",
						"dhtml: minify",
						"dhtml: concatenate",
						undefined
					]
				},
				undefined
			]
		},
		{
			title	: "Чего было сделано недавно?",
			layout	: "paragraph",
			content	: [
				{
					layout	: "numbered",
					sequence: "restart",
					elements: [
						"pdf: переносятся цифры в numbered при нехватке места",
						[
							"image layout",
							{
								layout	: 'layout-example',
								content	: {
									layout	: 'image',
									resolve	: "absolute:public/resources/doc/layouts/sample.jpg"
								}
							}
						],
						[
							"grid layout - просто сетка чтоли",
							{
								layout	: "layout-example",
								content	: [
									{
										layout	: "grid",
										width	: 3,
										elements: [
											1,
											2,
											3,
											4
										]
									},
									"",
									{
										layout	: "grid",
										width	: 2,
										border	: true,
										elements: [
											true,
											"second",
											3
										]
									}
								]
							}
						],
						[
							"link layout",
							{
								layout	: 'layout-example',
								content	: [
									{
										layout	: 'link',
										href	: 'http://myx.ru'
									},
									{
										layout	: 'link',
										title	: 'MyX.ru',
										href	: 'http://myx.ru'
									}
								]
							}
						],
						[
							"null layout",
							{
								layout	: 'layout-example',
								content	: {
									layout	: 'null',
									property: "doesn't matter"
								}
							}
						],
						"array as an element of numbered in html produce no numbers",
						"array as an element of numbered in pdf produce extra numbers",
						"pdf: table-based sequence has problems with cells keeping together",
						"pdf: последняя строка таблицы растягивается до контейнера - с бордюрами ужасно - надо чтобы не растягивалась",
						"array is used as prototype which breaks everything in some cases: json",
						"Dhtml должен наследовать Html так, чтобы и DomContext и FolderContext работали",
						"ECMA-262 connected",
						"JSLT layouts",
						"Servlet test",
						"HTML/DHTML test",
						"PDF test",
						"CM skin test",
						"infrastructure",
						"CM repackaging (to pull required classes in smallest number of most abstract libs)",
						"failover layouts: boolean, number",
						"layout engine arch",
						"layout format",
						undefined
					]
				},
				undefined
			]
		},
		undefined
	]
}